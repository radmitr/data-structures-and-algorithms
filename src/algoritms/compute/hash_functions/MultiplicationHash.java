package algoritms.compute.hash_functions;

/**
 * ------------------------------------------------------------------------------------------------
 * Хеш-функция
 * ------------------------------------------------------------------------------------------------
 * Хеш-функция (функция свертки) — функция, генерирующая на основе входных данных
 * произвольной длины, битовую строку фиксированной длины. Процесс генерации называют
 * хешированием. Входные данные иногда называют «ключом», «сообщением». Результирующая
 * битовая строка называется «хешем», «хеш-кодом», «хеш-суммой», «сводкой сообщения».
 * В общем случае множество входящих данных больше множества хешей, это приводит к тому, что
 * для различных входных данных генерируется один и тот же хеш-код. Такая ситуация называется
 * коллизией.
 * ------------------------------------------------------------------------------------------------
 * Требования выдвигаемые к хеш-функции
 *
 * В большинстве случаев к хеш-функции выдвигается несколько обязательных требований:
 *   1) Детерминированность используемого алгоритма. Следствием из этого является
 *      идентичность хешей при идентичности входных данных.
 *   2) Функция должна работать только с входными данными и не изменять их.
 *
 * «Хорошая»  хеш-функция должна обладать следующими желательными (но не обязательными)
 * свойствами:
 *   ● Быстрое вычисление. Хеш-функция должна быстро генерировать код на основе данных.
 *   ● Большая вычислительная сложность обратного вычисления. Должно быть сложно
 *     восстановить вид входящих данных по их хеш-коду (криптографическая стойкость)
 *   ● Малое количество коллизий
 *   ● Равномерное распределение входных данных на множество хеш-кодов
 * ================================================================================================
 * Хеш-функция на основе умножения
 *
 * Хеш-функция на основе умножения строиться следующим образом — умножаем числовое
 * представление ключа на константу 0 < A < 1 и выделяется дробная часть этого произведения.
 * Полученное значение умножается на M. После этого выделяется целая часть результата.
 *
 * h(K)=⌊M⋅{k⋅A}⌋
 *
 * Для константы A — есть рекомендуемое значение (Дональд Кнут)
 * A = (sqrt(5) - 1) / 2 ≈ 0.6180339887
 * ------------------------------------------------------------------------------------------------
 * <a href="https://youtu.be/mXu-erfSBDE">Ссылка на видео</a>
 * ------------------------------------------------------------------------------------------------
 */
public class MultiplicationHash {

    public static final double A = 0.6180339887; // рекомендуемое значение (Дональд Кнут)

	public static void main(String[] args) {
		int[] array1 = new int[] { 3, 6, 1 };

		System.out.println(hash(array1, 1 << 16));
	}

	public static int arrayToNumber(int[] array) {
		int result = array[0];
		for (int i = 0; i < array.length - 1; i++) {
			result = (result << 5) - result + array[i + 1];
		}
		return result;
	}

	public static int hash(int[] array, int m) {
		int number = Math.abs(arrayToNumber(array));
		return (int) (m * ((number * A) % 1));
	}
}
