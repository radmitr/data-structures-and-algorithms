package algoritms.theoretical_basis.memoization.sample2;

import java.math.BigInteger;
import java.util.function.Function;

/**
 * ------------------------------------------------------------------------------------------------
 * Мемоизация
 * ------------------------------------------------------------------------------------------------
 * Мемоизация — сохранение результатов выполнения функций для предотвращения
 * повторных вычислений. Применяется для увеличения скорости выполнения программ.
 * Основной механизм реализации - перед вызовом функции проверяется, вызывалась ли
 * функция ранее:
 *   ● если не вызывалась, то функция вызывается, и результат её выполнения
 *     сохраняется;
 *   ● если вызывалась, то используется сохранённый результат.
 *
 * Мемоизацию можно отнести к разновидности кеширования данных. При работе с
 * рекурсивными функциями может повышать производительность.
 * ------------------------------------------------------------------------------------------------
 * Общие идее при реализации мемоизации
 *
 * Нужно создать элемент (в дальнейшем хранилище) который способен хранить пары значений с
 * последующим быстрым извлечением. Для этого идеально подойдут ассоциативные массивы
 * (словарь, карта) в качестве ключа использовать значение параметра функции, в качестве значения
 * результат ее работы. В таком случае при вызове функции сначала проверяем нет ли таких
 * параметров в хранилище (проверяем наличие такого ключа) и если они там есть, то возвращаем
 * значение не выполняя при этом тело функции, если же таких параметров в хранилище нет, то
 * выполняем тело функции после чего записываем в хранилище пару ключ которой равен
 * параметрам, а значение вычисленному результату. После чего возвращаем вычисленное значение.
 * ------------------------------------------------------------------------------------------------
 * Замечания по использованию мемоизации
 *
 * Общие рекомендации при применении мемоизации:
 *   ● Для того, чтобы функцию можно было подвергнуть мемоизации, она должна быть чистой:
 *     ● детерминированной (т.е. при одном и том же наборе параметров функции должна
 *       возвращать одинаковое значение)
 *     ● без побочных эффектов (т.е. не должна влиять на состояние системы).
 *   ● Мемоизация — это компромисс между производительностью и потреблением памяти.
 * Мемоизация хороша для функций, имеющих сравнительно небольшой диапазон входных
 * значений, что позволяет достаточно часто, при повторных вызовах функций, задействовать
 * значения, найденные ранее, не тратя на хранение данных слишком много памяти.
 *   ● Функции с мемоизацией хорошо показывают себя там, где выполняются сложные,
 *     ресурсоёмкие вычисления. Здесь данная техника может значительно повысить
 *     производительность решения.
 * ------------------------------------------------------------------------------------------------
 * <a href="https://youtu.be/VwmJ-Lj1Qsk">Ссылка на видео</a>
 * ------------------------------------------------------------------------------------------------
 */
public class Main {

    public static void main(String[] args) {
        Function<Integer, BigInteger> fact = Main::factorial;

        fact = Memoization.getMemoizedFunction(fact);

        System.out.println(fact.apply(5));
        System.out.println(fact.apply(5));
    }

    public static BigInteger factorial(int number) {
        BigInteger fact = BigInteger.ONE;
        for (int i = 1; i <= number; i++) {
            fact = fact.multiply(BigInteger.valueOf(i));
        }
        return fact;
    }
}
