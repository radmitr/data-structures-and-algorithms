package algorithms.computations.merging_sorted_sequences;

import java.util.Arrays;

/**
 * ------------------------------------------------------------------------------------------------
 * Слияние отсортированных последовательностей
 * ------------------------------------------------------------------------------------------------
 *
 * Под слиянием отсортированных последовательностей подразумевают объединение
 * нескольких отсортированных последовательностей в одну отсортированную
 * последовательность.
 *
 * Слияние может производиться для двух отсортированных частей одной последовательностей.
 * ------------------------------------------------------------------------------------------------
 * Сведение об алгоритме
 *
 * Сложность по времени в наихудшем случае O(n+m)
 * Требует дополнительно памяти в размере суммы размеров объединяемых последовательностей.
 * ------------------------------------------------------------------------------------------------
 * Слияние отсортированных подпоследовательностей
 *
 * Если в пределах последовательности есть две соседствующие подпоследовательности, то их также
 * можно объединить в одну отсортированную последовательность.
 * ------------------------------------------------------------------------------------------------
 * Описание алгоритма
 *
 * 1) Создаем результирующую последовательность длинна которой равна длине базовой. Создать
 * две вспомогательных переменных для хранения индексов (например l и r) присвоить им
 * значение индексов первого элемента в первой подпоследовательности и первого элемента во
 * второй подпоследовательности соответственно.
 *
 * 2) Выполнить проход по результирующей последовательности от l до конца второй
 * подпоследовательности. Для добавления элемента в результирующую последовательность
 * выполнить ряд проверок:
 *    2.1) Если значение индекса l больше длинны первой подпоследовательности то добавить
 *         элемент стоящий на индексе r во второй подпоследовательности. Увеличить значение r на
 *         единицу.
 *    2.2) Если значение индекса r больше длинны второй подпоследовательности то добавить
 *         элемент стоящий на индексе l в первой подпоследовательности. Увеличить значение l на
 *         единицу.
 *    2.3) Если элемент на индексе l меньше элемента на индексе r то добавить элемент стоящий на
 *         индексе l в первой подпоследовательности. Увеличить значение l на единицу.
 *    2.4) Добавить элемент стоящий на индексе r во второй подпоследовательности. Увеличить
 *         значение r на единицу.
 * ------------------------------------------------------------------------------------------------
 * <a href="https://youtu.be/RJkn1DXyH3U">Ссылка на видео</a>
 * ------------------------------------------------------------------------------------------------
 */
public class MergingSortedSubsequences {

    public static void main(String[] args) {
        int[] array = { 1, 3, 6, 9, 2, 4, 4, 7 };
        System.out.println(Arrays.toString(array));

        merge(array, 0, 3, 4, 7);
        System.out.println(Arrays.toString(array));
    }

    public static void merge(int[] array, int ls, int le, int rs, int re) {
        int[] supportArray = Arrays.copyOf(array, array.length);
        int l = ls;
        int r = rs;
        for (int i = ls; i <= re; i++) {
            if (l > le) {
                array[i] = supportArray[r];
                r++;
            } else if (r > re) {
                array[i] = supportArray[l];
                l++;
            } else if (supportArray[l] < supportArray[r]) {
                array[i] = supportArray[l];
                l++;
            } else {
                array[i] = supportArray[r];
                r++;
            }
        }
    }
}
