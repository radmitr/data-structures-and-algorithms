package algoritms.searches.linear_search;

import java.util.Arrays;

/**
 * ------------------------------------------------------------------------------------------------
 * Линейный (последовательный) поиск.
 * ------------------------------------------------------------------------------------------------
 * Сведение о алгоритме
 *
 * Алгоритм линейного поиска
 * Сложность по времени в наихудшем случае O(n)
 * Затраты памяти O(n)
 * ------------------------------------------------------------------------------------------------
 * Принцип работы алгоритма
 *
 * 1) Установить начальное значения индекса (обозначим его i) равным индексу первого
 *    элемента в последовательности.
 *
 * 2) Получить элемент стоящий по индексу n[i]. Возможны два случая:
 *      a) Ключ элемента равен искомому. Вернуть индекс и завершить алгоритм. Поиск
 *         успешен.
 *      b) Ключ элемента не равен искомому. Увеличить индекс на единицу. i=i+1. Перейти к
 *         пункту 3.
 *
 * 3) Проверить, индекс меньше или равен индексу последнего элемента в
 *    последовательности. Если да, то перейти к пункту 2. Если нет, то завершить алгоритм.
 *    Поиск неудачен.
 * ------------------------------------------------------------------------------------------------
 * <a href="https://youtu.be/zh0wT6XVrUY">Ссылка на видео</a>
 * ------------------------------------------------------------------------------------------------
 */
public class LinearSearch {

    public static void main(String[] args) {
        int[] sequence = { -2, 0, 3, 5, 7, 9, 11, 15, 18, 21 };
        System.out.println(Arrays.toString(sequence));

        // 1 - element found
        int element = 5;
        System.out.println(element + " => i=" + linearSearch(sequence, element));

        // 2 - element2 not found
        int element2 = 8;
        System.out.println(element2 + " => i=" + linearSearch(sequence, element2));
    }

    public static int linearSearch(int[] sequence, int element) {
        for (int i = 0; i < sequence.length; i++) {
            if (sequence[i] == element) {
                return i;
            }
        }
        return -1;
    }
}
