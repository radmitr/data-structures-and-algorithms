package data_structures.stacks;

/**
 * ------------------------------------------------------------------------------------------------
 * Стек на основе связанного списка
 * ------------------------------------------------------------------------------------------------
 * Стек
 *
 * Стек — это абстрактный тип данных, представляющий собой список элементов,
 * организованных по принципу LIFO (англ. last in — first out, «последним пришёл — первым вышел»).
 * Стек является динамической структурой данных.
 *
 * Поддерживаемые операции:
 *   ● Добавление элемента в вершину стека (push)
 *   ● Удаление элемента из вершины стека (pop)
 *   ● Получение элемента с вершины стека без удаления (peek)
 *   ● Получение размера стека (size)
 * ================================================================================================
 * Реализация стека с помощью односвязного списка
 *
 * Для односвязного списка наиболее эффективными операциями являются операции добавления
 * и удаления элемента из начала списка. Это дает возможность реализовать стек на основе связанного
 * списка. Такая реализация будет оптимальной и производительной. Для реализации стека стоит
 * использовать следующие операции односвязного списка:
 *   ● push (добавление элемента в голову списка)
 *   ● pop (удаление элемента из головы списка)
 *   ● peek (получение значение из головы списка)
 *   ● size (получение размера списка)
 * ------------------------------------------------------------------------------------------------
 * Добавление значения в стек
 *
 * При добавлении нового значения нужно создать новый узел который хранит добавляемое
 * значение и next = null.
 *
 * Установить значение next добавляемого узла равное head.
 * Значение head установить равным ссылке на добавляемый узел.
 * ------------------------------------------------------------------------------------------------
 * Получение значения с удалением
 *
 * Проверить значение head на пустоту. Если head не указывает на узел, то закончить (стек пуст).
 *
 * Установить значение head равное значению next удаляемого элемента.
 * Указать, значение next удаляемого узла равным null.
 * Сохранить для возврата значение удаляемого узла.
 * Освободить память, занимаемую удаляемым узлом.
 * ------------------------------------------------------------------------------------------------
 * Получение значения без удаления
 *
 * Проверить значение head на пустоту. Если ссылка не пустая, то вернуть значение данных в узле.
 * ------------------------------------------------------------------------------------------------
 * Получение размера
 *
 * Для получения размера стоит объявить переменную с начальным значением 0. Начиная с
 * начала списка выполнять переход по ссылке к следующему узлу. На каждом переходе увеличивать
 * значение этой переменной на 1. Закончить на узле, для которого next == null.
 * ------------------------------------------------------------------------------------------------
 * <a href="https://youtu.be/yhieoOOrBt4">Ссылка на видео</a>
 * ------------------------------------------------------------------------------------------------
 */
class SinglyLinkedListBasedStack {

    private Node head;

    public SinglyLinkedListBasedStack() {
    }

    private class Node {
        String data;
        Node next;

        public Node() {
        }

        public Node(String data, Node next) {
            this.data = data;
            this.next = next;
        }
    }

    public void push(String value) {
        Node newNode = new Node(value, head);
        head = newNode;
    }

    public String pop() {
        if (head != null) {
            String result = head.data;
            head = head.next;
            return result;
        }
        return null;
    }

    public String peek() {
        if (head != null) {
            String result = head.data;
            return result;
        }
        return null;
    }

    public long size() {
        long size = 0;
        for (Node currentNode = head; currentNode != null; currentNode = currentNode.next) {
            size++;
        }
        return size;
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("[");
        for (Node currentNode = head; currentNode != null; currentNode = currentNode.next) {
            sb.append(currentNode.data).append(" -> ");
        }
        sb.append("null]");
        return sb.toString();
    }

    //=============================================================================================
    public static void main(String[] args) {
        SinglyLinkedListBasedStack stack = new SinglyLinkedListBasedStack();
        System.out.println(stack);

        // 1 - push() and size()
        stack.push("Word");
        stack.push("Java");
        stack.push("Hello");
        System.out.println(stack);
        System.out.println(stack.size());

        // 2 - peek() and pop()
        while (stack.peek() != null) {
            System.out.println(stack.pop());
            System.out.println(stack);
        }
    }
}
