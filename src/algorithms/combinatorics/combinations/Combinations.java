package algorithms.combinatorics.combinations;

/**
 * ------------------------------------------------------------------------------------------------
 * Генерация сочетаний
 * ------------------------------------------------------------------------------------------------
 * Сведение о алгоритме
 *
 * Сложность по времени в наихудшем случае O((n!/(k!⋅(n - k)!))⋅k/(n - 1 + 1))
 * Затраты памяти O(k + 2)
 * k — элементов, выбранных из множества из n-элементов
 * ------------------------------------------------------------------------------------------------
 * Сочетание
 *
 * Сочетание из n по k - набор k элементов, выбранных из данного множества,
 * содержащего n различных элементов. Наборы, отличающиеся только порядком
 * следования элементов (но не составом), считаются одинаковыми. Т.е. порядок элементов
 * не важен.
 *
 * В размещении порядок следования не учитывается.
 * ------------------------------------------------------------------------------------------------
 * Количество сочетаний
 *
 * Число сочетаний из n по k равно биномиальному коэффициенту:
 * (n k) = n!/(k!⋅(n - k)!
 * ------------------------------------------------------------------------------------------------
 * Принцип работы алгоритма
 *
 * Генерируем все сочетания из n целых чисел [0, 1, 2 ... n-1] по k.
 *
 * 1) Создаем последовательность размером k + 2 элемента. Первые k элементов
 *    устанавливаем равному индексу элемента. Элемент k + 1 устанавливаем равным n,
 *    k + 2 — равный 0.
 *
 * 2) Начиная с начала последовательности, проверяем условие ki + 1 = ki+1. Если это так, то
 *    устанавливаем элемент равный его индексу. Как только это условие нарушено, то
 *    переходим к пункту 3.
 *
 * 3) Если индекс элемента, где нарушено условие больше k, заканчиваем алгоритм, если
 *    нет, то увеличиваем элемент, на который указывает индекс, на единицу.
 *    Возвращаемся к пункту 2.
 * ------------------------------------------------------------------------------------------------
 * <a href="https://youtu.be/yTIRwioT8W4">Ссылка на видео</a>
 * ------------------------------------------------------------------------------------------------
 */
public class Combinations {

    public static void main(String[] args) {
        // 1 - из 5 по 1
        printAllCombinations(5, 1);
        System.out.println();

        // 2 - из 5 по 2
        printAllCombinations(5, 2);
        System.out.println();

        // 3 - из 5 по 3
        printAllCombinations(5, 3);
    }

    public static void printAllCombinations(int n, int k) {
        int[] comb = new int[k + 2];
        for (int i = 0; i < k; i++) {
            comb[i] = i;
        }
        comb[k] = n;
        comb[k + 1] = 0;
        while (true) {
            printArrayPart(comb, 0, k);
            int j = 0;
            while (comb[j] + 1 == comb[j + 1]) {
                comb[j] = j;
                j++;
            }
            if (j < k) {
                comb[j]++;
            } else {
                break;
            }
        }
    }

    public static void printArrayPart(int[] array, int s, int e) {
        System.out.print("[");
        for (int i = s; i < e - 1; i++) {
            System.out.print(array[i] + ",");
        }
        System.out.println(array[e - 1] + "]");
    }
}
