package datastructures.stacks;

import java.util.Arrays;

/**
 * ------------------------------------------------------------------------------------------------
 * Стек на основе массива
 * ------------------------------------------------------------------------------------------------
 * Стек
 *
 * Стек — это абстрактный тип данных, представляющий собой список элементов,
 * организованных по принципу LIFO (англ. last in — first out, «последним пришёл — первым вышел»).
 * Стек является динамической структурой данных.
 *
 * Поддерживаемые операции:
 *   ● Добавление элемента в вершину стека (push)
 *   ● Удаление элемента из вершины стека (pop)
 *   ● Получение элемента с вершины стека без удаления (peek)
 *   ● Получение размера стека (size)
 * ================================================================================================
 * Реализация стека на основе массива
 *
 * В качестве основы стека можно использовать массивы переменной длинны. В таком случае
 * получение и добавления элемента в стек реализуются как изменение и получения элемента массива
 * по индексу. Отдельно нужно будет рассмотреть случай необходимости увеличения размера стека.
 * Для хранения индекса вершины стека можно использовать отдельную переменную, она же будет
 * использована для вычисления размера стека.
 * ------------------------------------------------------------------------------------------------
 * Реализации стека на основе массива
 *
 * В качестве основы стека берем массив нужного типа данных. Его размер будем называть
 * capacity (емкость). Также введем дополнительную переменную size (размер), она будет указателем
 * на вершину стека (место для добавления элемента). При создании стека size устанавливается как
 * индекс первого элемента в массиве.
 * ------------------------------------------------------------------------------------------------
 * Добавление значения в стек (размер меньше емкости)
 *
 * Если size меньше чем capacity, то добавляем элемент на индекс size и увеличиваем size на
 * единицу.
 * ------------------------------------------------------------------------------------------------
 * Добавление значения (размер равен емкости)
 *
 * Если size равно capacity, то создаем новый массив размером (capacity * 3)/2 + 1. Копируем
 * данные из базового массива в новый. Указываем, что теперь для хранения используется новый
 * массив. Добавляем элемент на индекс size и увеличиваем size на единицу.
 *
 * Освобождаем память занимаемую старым массивом.
 * ------------------------------------------------------------------------------------------------
 * Получение элемента без удаления
 *
 * При получении значения без удаления, сначала проверяют значение size. Если size равен
 * первому индексу в массиве, то стек пуст. В противном случае возвращаем элемент по
 * индексу size-1.
 * ------------------------------------------------------------------------------------------------
 * Получение элемента c удалением
 *
 * При получении значения с удалением сначала проверяют значение size. Если size равен
 * первому индексу в массиве, то стек пуст. В противном случае уменьшаем size на единицу и
 * возвращаем элемент по индексу size. При необходимости удаляем элемент по индексу size.
 * ------------------------------------------------------------------------------------------------
 * Уменьшение размера стека
 *
 * В большинстве случаев стек на основе массива только увеличивает свою емкость.
 * Автоматического уменьшения емкости не предусматривают. Для уменьшения емкости используют
 * функцию, вызов которой осуществляется по желанию разработчика. В этой функции обычно
 * устанавливают capacity равное size.
 *
 * Создают новый массив размером size. Копируют данные из основного массива в новый.
 * Указываем что новый массив теперь используется вместо основного.
 *
 * Освобождаем память занимаемую старым массивом.
 * ------------------------------------------------------------------------------------------------
 * Получение размера стека
 *
 * Для получения размера стека нужно использовать значение size.
 * ------------------------------------------------------------------------------------------------
 *
 * Оценка сложности операций
 * ---------------------------------------------------------------
 * |   Операция             | Сложность операции в худшем случае |
 * ---------------------------------------------------------------
 * | Вставка элемента       |  O(n)                              |
 * | Получение без удаления |  O(1)                              |
 * | Получение с удалением  |  O(1)                              |
 * | Получение размера      |  O(1)                              |
 * ---------------------------------------------------------------
 *
 * ------------------------------------------------------------------------------------------------
 * <a href="https://youtu.be/eUapz78OXWw">Ссылка на видео</a>
 * ------------------------------------------------------------------------------------------------
 */
class ArrayBasedStack {

    private final int DEFAULT_CAPACITY = 16;
    private final int MAX_STACK_SIZE = Integer.MAX_VALUE - 1;
    private Object[] dataArray;
    private int size;
    private int capacity;

    public ArrayBasedStack() {
        dataArray = new Object[DEFAULT_CAPACITY];
        capacity = dataArray.length;
        size = 0;
    }

    public void push(Object value) {
        if (size >= capacity) {
            boolean resizeResult = upResize();
            if (!resizeResult) {
                throw new RuntimeException("Cannot add an element");
            }
        }
        dataArray[size] = value;
        size++;
    }

    public Object pop() {
        if (size == 0) {
            return null;
        }
        size--;
        Object element = dataArray[size];
        dataArray[size] = null;
        return element;
    }

    public Object peek() {
        if (size == 0) {
            return null;
        }
        return dataArray[size - 1];
    }

    public int size() {
        return size;
    }

    public boolean upResize() {
        if (capacity >= MAX_STACK_SIZE) {
            return false;
        }
        long newCapacityL = (capacity * 3L) / 2L + 1L;
        int newCapacity = (newCapacityL < MAX_STACK_SIZE) ? (int) newCapacityL : MAX_STACK_SIZE;
        dataArray = Arrays.copyOf(dataArray, newCapacity);
        capacity = newCapacity;
        return true;
    }

    public void trimToSize() {
        dataArray = Arrays.copyOf(dataArray, size);
        capacity = dataArray.length;
    }

    public void clear() {
        dataArray = new Object[DEFAULT_CAPACITY];
        capacity = dataArray.length;
        size = 0;
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("[");
        for (int i = 0; i < size; i++) {
            if (i < size - 1) {
                sb.append(dataArray[i]).append(", ");
            } else {
                sb.append(dataArray[i]);
            }
        }
        sb.append("]");
        return sb.toString();
    }

    //=============================================================================================
    public static void main(String[] args) {
        ArrayBasedStack stack = new ArrayBasedStack();

        // 1 - push()
        stack.push("Hello");
        stack.push("Java");
        stack.push("stack");
        System.out.println(stack);

        // 2 - peek() and pop()
        while (stack.peek() != null) {
            System.out.println(stack.pop());
        }
        System.out.println(stack);

        // 3 - upResize()
        for (int i = 0; i < 17; i++) {
            stack.push("stack " + i);
        }
        System.out.println(stack);

        // 4 - trimToSize()
        System.out.println(stack.pop());
        System.out.println(stack.pop());
        System.out.println(stack.pop());
        System.out.println(stack.pop());
        stack.trimToSize();
        System.out.println(stack);

        // 5 - clear()
        stack.clear();
        System.out.println(stack);
    }
}
