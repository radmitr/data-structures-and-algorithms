package algorithms.sorts.bubble_sort;

import java.util.Arrays;

/**
 * ------------------------------------------------------------------------------------------------
 * Сортировка пузырьком
 * ------------------------------------------------------------------------------------------------
 * Сведение о алгоритме
 *
 * АлгоритмСортировка пузырьком.
 * Сложность по времени в наихудшем случае O(n^2)
 * Затраты памяти O(n)
 * ------------------------------------------------------------------------------------------------
 * Принцип работы алгоритма
 *
 * 1) Последовательность разбивается на две части. Отсортированную и не
 *    отсортированную. В качестве отсортированной части обычно выбирается
 *    правая часть последовательности.
 *
 * 2) Выполняется проход по не отсортированной части. И выполняется
 *    попарное сравнение элементов последовательности. Если первый элемент
 *    пары больше второго элемента, то происходит их обмен. В результате
 *    такого прохода максимальный элемент не отсортированной части
 *    последовательности попадает в ее конец. Он становиться первым членом
 *    отсортированной части последовательности.
 *
 * 3) Алгоритм прекращает свою работу в случае отсутствия обменов при
 *    проходе по не отсортированной части последовательности.
 * ------------------------------------------------------------------------------------------------
 * <a href="https://youtu.be/3P_YKzAhclE">Ссылка на видео</a>
 * ------------------------------------------------------------------------------------------------
 */
public class BubbleSort {

    public static void main(String[] args) {
        int[] array = { 5, 0, -2, 7, 3 };

        int sortedIndex = array.length;
        int numberOfSwap = 1;
        while (numberOfSwap > 0) {
            numberOfSwap = 0;
            for (int i = 0; i < sortedIndex - 1; i++) {
                if (array[i] > array[i + 1]) {
                    int temp = array[i];
                    array[i] = array[i + 1];
                    array[i + 1] = temp;
                    numberOfSwap += 1;
                }
            }
            sortedIndex -= 1;
        }
        System.out.println(Arrays.toString(array));
    }
}
